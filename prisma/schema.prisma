generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DocumentShare {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId String    @map("document_id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  document   Document  @relation("DocumentShares", fields: [documentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User      @relation("UserSharedDocuments", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([documentId, userId], map: "uniq_document_user")
  @@map("DocumentShare")
}

model Document {
  id        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String          @default("")
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  createdBy String          @map("created_by") @db.Uuid
  author    User            @relation("UserDocuments", fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Document_createdby_fkey")
  shares    DocumentShare[] @relation("DocumentShares")

  @@map("Document")
}

model User {
  id              String          @id @db.Uuid
  email           String
  displayName     String?         @map("display_name")
  createdAt       DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  documents       Document[]      @relation("UserDocuments")
  sharedDocuments DocumentShare[] @relation("UserSharedDocuments")

  @@map("User")
}
